stages:
- lint
- build
- test
- release

Lint dockerfiles:
  stage: lint
  needs: []
  image: hadolint/hadolint:latest-alpine
  script:
  - echo "Running Hadolint, a Dockerfile linter"
  - echo "For more information about reported errors, visit the Hadolint wiki on https://github.com/hadolint/hadolint/wiki"
  - hadolint docker/Dockerfile

variables:
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/magentaintra
  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  IMAGE: magentaaps/magentaintra
  IMAGE_VERSION: ${IMAGE}:${CI_COMMIT_TAG}
  IMAGE_LATEST: ${IMAGE}:latest

# Build stage
#############

Build image:
  stage: build
  needs: []
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
  - docker
  script:
  # Login to GitLab registry
  - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  - /kaniko/executor
    --cache=true
    --context=$CI_PROJECT_DIR
    --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
    --destination=${IMAGE_SHA}

# Defaults for test jobs
.test-default: &test-default
 stage: test
 needs: [ "Build image" ]

# Test stage
#############

tests:
  <<: *test-default
  image: $IMAGE_SHA
  variables:
    # Create a network that allows services to talk to each other
    FF_NETWORK_PER_BUILD: "true"

    # POSTGRES
    POSTGRES_HOST: postgres
    POSTGRES_DB: drupal
    POSTGRES_PREFIX: test_
    POSTGRES_USER: drupal
    POSTGRES_PASSWORD: drupal

    # SMTP
    SMTP_HOST: mailhog
    SMTP_PORT: "1025"
    SMTP_AUTH: "off"
    SMTP_TLS: "off"
    SMTP_USER: ""
    SMTP_PASSWORD: ""

    HASH_SALT: not-a-secret
    TRUSTED_HOST: localhost

    # Drupal variables saved in the database
    SITE_NAME: MagentaDrupal9
    SITE_MAIL: admin@example.com
    ACCOUNT_MAIL: admin@example.com
    ACCOUNT_NAME: admin
    ACCOUNT_PASS: admin

    # Codeception
    URL: http://localhost

  services:
  - name: postgres
  script:
  - cd /opt/drupal
  - /opt/docker/site-install.sh
  # Run webserver in background
  - cd $CI_PROJECT_DIR
  - apache2-foreground &
  - sleep 1 # We have to wait for apache to startup
  # Run test suite
  - cd tests
  - php /opt/drupal/vendor/bin/codecept run acceptance --xml --steps
  artifacts:
    when: always
    expire_in: 1 week
    paths:
    - tests/_output
    # make the report available in Gitlab UI. see https://docs.gitlab.com/ee/ci/unit_test_reports.html
    reports:
      junit: tests/_output/report.xml


.release-default: &release-default
  stage: release
  needs: ["tests"]
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  tags:
  - docker
  before_script:
  - apk add skopeo


Release master:
  <<: *release-default
  rules:
  # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
  - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  script:
  - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_VERSION}"
  - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_LATEST}"